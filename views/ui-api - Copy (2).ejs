<!DOCTYPE html>
<script src="https://maps.googleapis.com/maps/api/js?libraries=places&key=AIzaSyD1LCWyuLkzDMvyOYxBIvmjyBJsqLDnPA4"></script>
<script src="https://cdn.rawgit.com/googlemaps/v3-utility-library/master/routeboxer/src/RouteBoxer.js" type="text/javascript"></script>
<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.1.1/jquery.min.js"></script>
<script src="javascripts/turf.min.js"></script>

<table border="1">
  <tr>
    <td valign="top">
      <div id="map" style="width: 1500px; height: 850px;;"></div>
    </td>
    <td>
      <div id="side_bar" style="width:400px; height: 850px; overflow: auto">
				<table style="width: 100%;">
					<tr>
						<th>Name</th>
						<th>weight</th>
					</tr>
				</table>
			</div>
    </td>
  </tr>
</table>
Box within at least
<input type="text" id="distance" value="0.5" size="3">miles of the route from
<input type="text" id="from" value="30 Cooper Sq New York, NY 10003" />to
<input type="text" id="to" value="314 W 11th St New York, NY 10014" />
<input type="submit" onclick="route()" />
<br>
<label>type</label>
<input type="text" id="type" value="point_of_interest" />
<label>keyword</label>
<input type="text" id="keyword" value="" />
<label>name</label>
<input type="text" id="name" value="" />
<div id="towns"></div>

<style>
html,
body,
#map_canvas {
  margin: 0;
  padding: 0;
  height: 100%;
}
</style>
<script>
var map = null;
var boxpolys = null;
var directions = null;
var routeBoxer = null;
var distance = null; // km
var service = null;
var gmarkers = [];
var boxes = null;
var infowindow = new google.maps.InfoWindow();
var routerequest = null;

function initialize() {
  // Default the map view to the continental U.S.
  var mapOptions = {
    center: new google.maps.LatLng(38.279518, -121.867905),
    zoom: 9,
    mapTypeId: google.maps.MapTypeId.ROADMAP
  };

  map = new google.maps.Map(document.getElementById("map"), mapOptions);
	
  service = new google.maps.places.PlacesService(map);

  routeBoxer = new RouteBoxer();

  directionService = new google.maps.DirectionsService();
  directionsRenderer = new google.maps.DirectionsRenderer({
    map: map
  });

  // If there are any parameters at eh end of the URL, they will be in  location.search
  // looking something like  "?marker=3"

  // skip the first character, we are not interested in the "?"
  var query = location.search.substring(1);

  // split the rest at each "&" character to give a list of  "argname=value"  pairs
  var pairs = query.split("&");
  for (var i = 0; i < pairs.length; i++) {
    // break each pair at the first "=" to obtain the argname and value
    var pos = pairs[i].indexOf("=");
    var argname = pairs[i].substring(0, pos).toLowerCase();
    var value = pairs[i].substring(pos + 1).toLowerCase();

    // process each possible argname  -  use unescape() if theres any chance of spaces
    if (argname == "to") {
      document.getElementById('to').value = unescape(value);
    }
    if (argname == "from") {
      document.getElementById('from').value = unescape(value);
    }
    if (argname == "dist") {
      document.getElementById('distance').value = parseFloat(value);
    }
    if (argname == "type") {
      document.getElementById('type').value = unescape(value);
    }
    if (argname == "keyword") {
      document.getElementById('keyword').value = unescape(value);
    }
    if (argname == "name") {
      document.getElementById('name').value = unescape(value);
    }
    if (argname == "submit") {
      route();
    }
  }

}

function route() {
  // Clear any previous route boxes from the map
  clearBoxes();

  // Convert the distance to box around the route from miles to km
  distance = parseFloat(document.getElementById("distance").value) * 1.609344;

  routerequest = {
    origin: document.getElementById("from").value,
    destination: document.getElementById("to").value,
		
		waypoints: [
    /*
		{
      location: 'sunnyvale',
      stopover: true
    },{
      location: '37.3979464,-121.97429360000001',
      stopover: true
    }
		*/],
    travelMode: google.maps.DirectionsTravelMode.DRIVING,
		optimizeWaypoints: true
		
  }

  // Make the directions request
  directionService.route(routerequest, function(result, status) {
    if (status == google.maps.DirectionsStatus.OK) {
      directionsRenderer.setDirections(result);
      // Box around the overview path of the first route
      // console.log(result.routes)
			var path = result.routes[0].overview_path;
			
			//console.log(path[0]);
			
			
			//turf
			//20170326
			var dataMap = new google.maps.Data();
			var setStyle = function(){
				dataMap.setStyle(function(feature){
					if( feature.getProperty('name') ){
						return { icon: new google.maps.MarkerImage("https://chart.googleapis.com/chart?chst=d_map_pin_icon&chld=train|FFFF88") };
					}
					else if( feature.getProperty('line') ){
						return { strokeWeight: 5, strokeColor: '#00f' };
					}
					else{
						return { strokeWeight: 1, strokeColor: '#00f', fillOpacity: 0.25, fillColor: '#F5C13D' };
					}
				});
			};
			
			var point = [];
				
			$.each(path, function(index, p){
				point.push({"id": index, name: '',"latitude":p.lat(),"longitude":p.lng()});
			});	
				
			var buffered, lineArr = [], pointArr = [];

			for (var i = 0; i < point.length; i++) {
				pointArr.push(turf.point([point[i].longitude, point[i].latitude], { name: point[i].name }));
				lineArr.push([point[i].longitude, point[i].latitude]);
			}
			var linestring = turf.linestring(lineArr, {line: '1'});
			buffered = turf.buffer(linestring, $('#distance').val(), "kilometers");

			//dataMap.addGeoJson(turf.featurecollection(pointArr));
			dataMap.addGeoJson(linestring);
			dataMap.addGeoJson(buffered);
			
			
			//console.log(buffered.features[0].geometry.coordinates[0]);
			/*
			var point_2 = buffered.features[0].geometry.coordinates[0];
			var pointArr2 = [];
			for (var i = 0; i < point_2.length; i++) {
				pointArr2.push(turf.point([point_2[i][0], point_2[i][1]], { name: 'test' }));
			}
			console.log(pointArr2);
			*/
			//var pointArr2 = [turf.point([-121.93954535506933,37.31], { name: 'test' })]
			//dataMap.addGeoJson(turf.featurecollection(pointArr2));
			
			
			$.get('/test_db', {buffered: buffered.features[0].geometry.coordinates[0]}, function(data){
				//sort data
				var preference = {
														//Theaters : 100,
														NATURE: 10,
														CULTURE: 15,
														AMUSEMENT: 60,
														SHOPPING: 100,
														NIGHTLIFE: 10
													};
				
				data.sort(function(a, b) {
						return getWeight(b,preference) - getWeight(a,preference);
				});
				
				//push poi
				var pointArr2 = [];
				for (var i = 0; i < data.length; i++) {
					console.log(data[i].length_visit);
					pointArr2.push(turf.point([data[i]['geo'][1], data[i]['geo'][0]], { name: data[i]['name'] }));
					
					var item = $('<tr data-geo="' + data[i]['geo'][0] + ',' + data[i]['geo'][1] + '"><td>' + data[i].name + '</td><td>' + getWeight(data[i],preference) + '</td></tr>');
					//var geo = data[i]['geo'][1] + ',' + data[i]['geo'][0];
					$('#side_bar table').append(item);
					
					item.on('click', function(){
						//console.log($(this).attr('data-geo'));
						//$(item).attr('background', 'red');
						routerequest.waypoints.push({
							location: $(this).attr('data-geo'),
							//location: "40.73982, -74.00703",
							stopover: true
						});
						
						console.log(routerequest);
						
						directionService.route(routerequest, function(result1, status1) {
							if (status1 == google.maps.DirectionsStatus.OK) {
								directionsRenderer.setDirections(result1);
							}else
								console.log(status1);
						})
						
						//console.log(routerequest);
						//console.log($(this).attr('data-geo'));
						/*
						for (var i = 0; i < 5; i++) {
							routerequest1.waypoints.push({
								location: data[i].geo[0] + ',' + data[i].geo[1],
								stopover: true
							});
						}
						*/
						
						
					});
					
					
					//console.log(data[i].geo);
						
					//console.log(data[i].name);
					//console.log(getWeight(data[i],preference));
				}

				/*
				console.log(data);
				for(var i=0; i<data.length; i++){
					console.log(getWeight(data[i],preference));
				}
				*/
				
				
				
				
				
				
				
				
				
				//dataMap.addGeoJson(turf.featurecollection(pointArr2))
			});
			

			//console.log(buffered);
			
			//setStyle();
			dataMap.setMap(map);
			//findPlaces_beta
			//console.log(map.getBounds());
			
			//20170326
			
			
			/*
			var buffered, lineArr = [], pointArr = [];
			var dataMap = new google.maps.Data();
			
			var setStyle = function(){
				dataMap.setStyle(function(feature){
					if( feature.getProperty('name') ){
						return { icon: new google.maps.MarkerImage("https://chart.googleapis.com/chart?chst=d_map_pin_icon&chld=train|FFFF88") };
					}
					else if( feature.getProperty('line') ){
						return { strokeWeight: 8, strokeColor: '#00f' };
					}
					else{
						return { strokeWeight: 1, strokeColor: '#00f', fillOpacity: 0.25, fillColor: '#F5C13D' };
					}
				});
			};
			
			$.each(path, function(index, point){
				lineArr.push([point.longitude, point.latitude]);
			});
			var linestring = turf.linestring(lineArr, {line: '1'});
			buffered = turf.buffer(linestring, 1, "kilometers");
			*/
			//map.data.add(buffered);
			
			//dataMap.addGeoJson(buffered);
			//setStyle();
			//dataMap.setMap(map);
			
      //boxes = routeBoxer.box(path, distance);
      // alert(boxes.length);
      //drawBoxes();
      //findPlaces(0);
    } else {
      alert("Directions query failed: " + status);
    }
  });
}

var getWeight = function(poi, preference) {
	//average rates
	var rates = 0.0;
	var numRates = 0;
	for(var i = 0; i<poi.ratings.length; i++) {
		numRates += poi.ratings[i];
		rates += poi.ratings[i] * (5-i);
	}
		rates /= numRates;
	
	//totalreview = 	totalreviews + numRates
	var totalNumberOfReview = poi.totalreviews + numRates;
	
	
	//preference point to percentage
	var preferPercentage = preferToPercentage(preference);
	
	//find key of prefer
	var preferKey = Object.keys(preference);
	var key = null;
	for(var i = 0; i<poi.genres.length; i++) {
		var n = -1;
		for(var j = 0; j<preferKey.length; j++) {
			n = poi.genres[i].search(new RegExp(preferKey[j], "i"));
			if(n != -1){
				key = preferKey[j];
				break;
			}
		}
		if(n != -1)
			break;
	}
	
	//ignore children favour
	
	/*
	console.log(poi);
	console.log(poi.genres);
	console.log(poi.totalreviews);
	console.log(poi.ratings);
	console.log(totalNumberOfReview);
	console.log(rates);
	console.log(preferPercentage);
	console.log(n);
	console.log(key);
	*/
	//return weight
	if(key != null)
		if(rates >= 4.5)
			return totalNumberOfReview * 1 * preferPercentage[key];
		else if(rates >= 4)
			return totalNumberOfReview * 2/3 * preferPercentage[key];
		else if(rates >= 3.5)
			return totalNumberOfReview * 1/3 * preferPercentage[key];
		else
			return 0;
	else
		return 0;
};

var preferToPercentage = function(preference) {
	var newPref = {};
	var sum = 0;
	Object.keys(preference).forEach(function(key) {
		sum += preference[key];
	});
	
	Object.keys(preference).forEach(function(key) {
		newPref[key] = preference[key] / sum;
	});
	return newPref;
};

// Draw the array of boxes as polylines on the map
/*
function drawBoxes() {
  boxpolys = new Array(boxes.length);
  for (var i = 0; i < boxes.length; i++) {
    boxpolys[i] = new google.maps.Rectangle({
      bounds: boxes[i],
      fillOpacity: 0,
      strokeOpacity: 1.0,
      strokeColor: '#000000',
      strokeWeight: 1,
      map: map
    });
  }
}
*/

function findPlaces_beta(bound) {
  var type = document.getElementById('type').value;
  var keyword = document.getElementById('keyword').value;
  var name = document.getElementById('name').value;
  var request = {
    bounds: bound,
  };
  if (!!type && (type != "")) {
    if (type.indexOf(',') > 0)
      request.types = type.split(',');
    else
      request.types = [type];
  }
  if (!!keyword && (keyword != "")) request.keyword = keyword;
  if (!!name && (name != "")) request.name = name;
  service.radarSearch(request, function(results, status) {
    if (status == google.maps.places.PlacesServiceStatus.OK) {
      //document.getElementById('side_bar').innerHTML += "bounds[" + searchIndex + "] returns " + results.length + " results<br>"
      for (var i = 0, result; result = results[i]; i++) {
        //console.log(result);
				var marker = createMarker(result);
      }
    } else {
      //document.getElementById('side_bar').innerHTML += "bounds[" + searchIndex + "] returns 0 results<br>&nbsp;status=" + status + "<br>";
    }
		/*
    if (status != google.maps.places.PlacesServiceStatus.OVER_QUERY_LIMIT) {
      searchIndex++;
      if (searchIndex < boxes.length)
        findPlaces(searchIndex);
    } else { // delay 1 second and try again
      setTimeout("findPlaces(" + searchIndex + ")", 1000);
    }
		*/
  });
}


function findPlaces(searchIndex) {
  var type = document.getElementById('type').value;
  var keyword = document.getElementById('keyword').value;
  var name = document.getElementById('name').value;
  var request = {
    bounds: boxes[searchIndex],
  };
  if (!!type && (type != "")) {
    if (type.indexOf(',') > 0)
      request.types = type.split(',');
    else
      request.types = [type];
  }
  if (!!keyword && (keyword != "")) request.keyword = keyword;
  if (!!name && (name != "")) request.name = name;
  service.radarSearch(request, function(results, status) {
    if (status == google.maps.places.PlacesServiceStatus.OK) {
      document.getElementById('side_bar').innerHTML += "bounds[" + searchIndex + "] returns " + results.length + " results<br>"
      for (var i = 0, result; result = results[i]; i++) {
        //console.log(result);
				var marker = createMarker(result);
      }
    } else {
      document.getElementById('side_bar').innerHTML += "bounds[" + searchIndex + "] returns 0 results<br>&nbsp;status=" + status + "<br>";
    }
    if (status != google.maps.places.PlacesServiceStatus.OVER_QUERY_LIMIT) {
      searchIndex++;
      if (searchIndex < boxes.length)
        findPlaces(searchIndex);
    } else { // delay 1 second and try again
      setTimeout("findPlaces(" + searchIndex + ")", 1000);
    }

  });
}

// Clear boxes currently on the map
function clearBoxes() {
  if (boxpolys != null) {
    for (var i = 0; i < boxpolys.length; i++) {
      boxpolys[i].setMap(null);
    }
  }
  boxpolys = null;
}

function createMarker(place) {
  var placeLoc = place.geometry.location;
	//console.log(placeLoc.lat());
	//console.log(placeLoc.lng());
  if (place.icon) {
    var image = new google.maps.MarkerImage(
      place.icon, new google.maps.Size(71, 71),
      new google.maps.Point(0, 0), new google.maps.Point(17, 34),
      new google.maps.Size(25, 25));
  } else var image = {
    url: "https://maps.gstatic.com/intl/en_us/mapfiles/markers2/measle.png",
    size: new google.maps.Size(7, 7),
    anchor: new google.maps.Point(3.5, 3.5)
  };

  var marker = new google.maps.Marker({
    map: map,
    icon: image,
    position: place.geometry.location
  });
  var request = {
    reference: place.reference
  };
  google.maps.event.addListener(marker, 'click', function() {
    service.getDetails(request, function(place, status) {
			//console.log(11);
      if (status == google.maps.places.PlacesServiceStatus.OK) {
        var contentStr = '<h5>' + place.name + '</h5><p>' + place.formatted_address;
        if (!!place.formatted_phone_number) contentStr += '<br>' + place.formatted_phone_number;
        if (!!place.website) contentStr += '<br><a target="_blank" href="' + place.website + '">' + place.website + '</a>';
        contentStr += '<br>' + place.types + '</p>';
        infowindow.setContent(contentStr);
        infowindow.open(map, marker);
				
				/*
				if(!routerequest['waypoints']) 
					routerequest['waypoints'] = [];
					routerequest['waypoints'].push(
						{
							location: placeLoc.lat() + ',' + placeLoc.lng(),
							stopover: true
						}
					);
					*/
				/*
					routerequest.waypoints.push(
						{
							location: placeLoc.lat() + ',' + placeLoc.lng(),
							stopover: true
						}
					);
					console.log(routerequest);
					console.log(JSON.stringify(routerequest));
				$.post("/test_mine", JSON.stringify(routerequest), function(result){
						console.log(Object.keys(result)[0]);
				});
				*/
				//console.log(routerequest);
				//console.log(place.reference);
				
				//directionsRenderer.setMap(null);

				//route();
				
      } else {
        var contentStr = "<h5>No Result, status=" + status + "</h5>";
        infowindow.setContent(contentStr);
        infowindow.open(map, marker);
      }
    });

  });
  gmarkers.push(marker);
  if (!place.name) place.name = "result " + gmarkers.length;
  /*
	if (!place.name){
		service.getDetails(request, function(p, status){
			 if (status == google.maps.places.PlacesServiceStatus.OK){
				var side_bar_html = "<a href='javascript:google.maps.event.trigger(gmarkers[" + parseInt(gmarkers.length - 1) + "],\"click\");'>" + p.name + "</a><br>";
				document.getElementById('side_bar').innerHTML += side_bar_html;
			 }else{
					var contentStr = "<h5>No Result, status=" + status + "</h5>";
					infowindow.setContent(contentStr);
					infowindow.open(map, marker);
      }
		});
	}else{
		var side_bar_html = "<a href='javascript:google.maps.event.trigger(gmarkers[" + parseInt(gmarkers.length - 1) + "],\"click\");'>" + place.name + "</a><br>";
		document.getElementById('side_bar').innerHTML += side_bar_html;
	}
	*/
	var side_bar_html = "<a href='javascript:google.maps.event.trigger(gmarkers[" + parseInt(gmarkers.length - 1) + "],\"click\");'>" + place.name + "</a><br>";
	document.getElementById('side_bar').innerHTML += side_bar_html;
}

google.maps.event.addDomListener(window, 'load', initialize);

</script>